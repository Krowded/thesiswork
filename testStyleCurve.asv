magicHouse = loadAndPrepareModelFolder('testMagicHouse');
magicFoundationStructs = magicHouse.foundation.models;

lowestHighestPoint = Inf;
for i = 1:length(magicFoundationStructs)
    lowestHighestPoint = min(lowestHighestPoint, max(magicFoundationStructs(i).vertices*magicFoundationStructs(i).upVector'));
end

%lowestHighestPoints = Inf;
curves = struct('vertices', [], 'curveFunction', [], 'curveLength', [], 'span', []);
for i = 1:length(magicFoundationStructs)
    wallStruct = magicFoundationStructs(i);
    wallStruct.vertices = wallStruct.vertices(wallStruct.vertices*wallStruct.upVector' < (lowestHighestPoint - 0.001), :);
    curves(i) = getWallCurve(wallStruct);
end

%Make a new foundation
%foundationStructs = buildSquareFoundation(20000, 10000, 2000);
foundationStructs = buildAnySidedFoundation(5, 10000, 10000, 2000);

%Transfer curves
% foundationStructs(1) = curveLeftCorner(foundationStructs(1), curves(4).curveFunction);
% for i = 1:4
%     if i > 1
%         foundationStructs(i) = curveLeftCorner(foundationStructs(i), curves(i-1).curveFunction);
%     end
% 
%     foundationStructs(i) = curveWall(foundationStructs(i), curves(i).curveFunction);
% 
%     if i < 4
%         foundationStructs(i) = curveRightCorner(foundationStructs(i), curves(i+1).curveFunction);
%     end
% end
% foundationStructs(4) = curveRightCorner(foundationStructs(4), curves(1).curveFunction);

[foundationStructs(1), foundationStructs(4), foundationStructs(2)] = curveWallTimesFour(foundationStructs(1), foundationStructs(4), foundationStructs(2), curves, [0, 0, 1]);
for i = 2:3
    [foundationStructs(i), foundationStructs(i-1), foundationStructs(i+1)] = curveWallTimesFour(foundationStructs(i), foundationStructs(i-1), foundationStructs(i+1), curves, [0, 0, 1]); 
end
[foundationStructs(4), foundationStructs(3), foundationStructs(1)] = curveWallTimesFour(foundationStructs(1),  curves, [0, 0, 1]);


foundationStruct = mergeModels(foundationStructs);

write_ply(foundationStruct.vertices, foundationStruct.faces, 'test.ply');