function [wallStruct, wallStructToTheLeft, wallStructToTheRight] = curveWallTimesFour(wallStruct, wallStructToTheLeft, wallStructToTheRight, curveStructs, frontVector)
    %Assume frontVector in same plane as all wall frontnormals
    angle = acos(dot(wallStruct.frontNormal, frontvector));
    vec2D = flattenVertices([frontVector; wallStruct.frontNormal], normalize(cross(frontVector, wallStruct.frontNormal)));
    angleSign = sign(vec2D(1,1)*vec2D(2,2) - vec2D(1,2)*vec2D(2,1));
    angle = angleSign*angle;
    
    frontShare = max(cos(angle),0);
    leftShare = max(sin(angle),0);
    rightShare = max(sin(-angle),0);
    backShare = max(cos(-angle),0);
    amount = [frontShare leftShare rightShare backShare];
    
    @(xq) curveStructs(4).curveFunction(xq) + amount(4);
    wallStruct = curveLeftCorner(wallStruct, curveStructs(4).curveFunction);
    for i = 1:4
        wallStruct = curveLeftCorner(wallStruct, curveStructs(i-1).curveFunction);

        wallStruct = curveWall(wallStruct, curveStructs(i).curveFunction);

        if i < 4
            wallStruct = curveRightCorner(wallStruct, curveStructs(i+1).curveFunction);
        end
    end
    wallStruct = curveRightCorner(wallStruct, curveStructs.curveFunction);
    
    
end